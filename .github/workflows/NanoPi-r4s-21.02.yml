#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT

name: NanoPi R4S 21.02

on:
#  release:
#    types: published
  #push:
  #  branches:
  #    - 21.02
  #  paths:
  #    - '.github/workflows/openwrt-rockchip-2102.yml'
  #    - 'step/00-prepare_openwrt.sh'
  #    - 'step/01-prepare_package.sh'
  #    - 'seed/rockchip.seed'
  #schedule:
  #  - cron: 30 21 * * *
  watch:
    types: started
  workflow_dispatch:

jobs:
    build:
      runs-on: ubuntu-18.04
      if: github.event.repository.owner.id == github.event.sender.id

      steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Show CPU Model and Free Space
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h
      - name: Set env
        run: |
          echo "SSH_ACTIONS=false" >> $GITHUB_ENV
          echo "UPLOAD_BIN_DIR=false" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=true" >> $GITHUB_ENV
          echo "UPLOAD_RELEASE=true" >> $GITHUB_ENV
          echo "TZ=America/New_York" >>$GITHUB_ENV
          echo "Build_Date=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "RELTAG=v$(date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV
          
      - name: Show env
        run: echo $GITHUB_ENV

      - name: free disk space
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
          /bin/bash ./img/workflow-scripts/free_disk_space.sh
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E rm -rf /etc/apt/sources.list.d
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons
          wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
          sudo -E apt-get clean -y
          git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
          df -h
      - name: Get OpenWrt source 21.02
        run: |
          /bin/bash ./img/steps/01_clone_openwrt_2102.sh
      - name: Get ImmortalWrt source 21.02
        run: |
          /bin/bash ./img/steps/01_clone_immortalwrt_2102.sh
      - name: Make working copy of OpenWrt source
        run: |
          /bin/bash ./img/steps/02_prepare_openwrt_folder_2102.sh
      - name: Patch OpenWrt source R2S / 21.02
        run: |
          /bin/bash ./img/steps/r2s/03_patch_openwrt_2102.sh
      - name: Prepare package
        run: |
          /bin/bash ./img/steps/04-prepare_package.sh
      - name: Add ACL
        run: |
          /bin/bash ./img/steps/05-create_luci_acl.sh
      - name: Load ao mini Config
        run: |
          /bin/bash ./img/steps/06-create_config_from_mini_seed.sh
          
      - name: Download package
        id: package
        run: |
          cd build/openwrt
          make defconfig
          make download -j128
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Make toolchain-aarch64
        id: compiletoolchain
        continue-on-error: true
        run: |
          cd build/openwrt
          let make_process=$(nproc)+1
          make toolchain/install -j${make_process} V=s
      - name: If toolchain Error
        if: steps.compiletoolchain.outcome == 'failure'
        run: |
          echo '================================================================'
          cd build/openwrt && make toolchain/install -j1 V=s
      - name: Compile OpenWRT for R2S & R4S mini
        id: compileopenwrtmini
        continue-on-error: true
        run: |
          cd build/openwrt
          let make_process=$(nproc)+1
          make -j${make_process} V=s || make -j${make_process} V=s
      - name: If compile openwrt Error
        if: steps.compileopenwrtmini.outcome == 'failure'
        run: |
          cat build/openwrt/.config
          echo '================================================================'
          cd build/openwrt && make -j1 V=s
      - name: Set env
        run: |
          echo "TZ=America/New_York" >>$GITHUB_ENV
          echo "Build_Date=$(date +%Y-%m-%d %H:%M)" >> $GITHUB_ENV
          echo "RELTAG=$(date +'%Y%m%d.%H%M')" >> $GITHUB_ENV
          echo "RELDATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
      
      - name: Organize files mini
        id: organizemini
        run: |
          rm -rf ./img/artifact/
          mkdir -p ./img/artifact/
          mv build/openwrt/bin/targets/rockchip/armv8/*sysupgrade.img* ./img/artifact/
          cd ./img/artifact/
          ls -Ahl
          mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-ext4-mini.img.gz
          mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-squashfs-mini.img.gz
          gzip -d *.gz && exit 0
          gzip --best *.img
          ls -Ahl
          zip OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-ext4-mini.zip *r4s*ext4*ini*
          zip OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-squashfs-mini.zip *r4s*squashfs* ini*
          cp ../img/build/openwrt/*.config ./ 
          ls -Ahl
      - name: Load .config for the FULL image
        run: |
          /bin/bash ./img/steps/06-create_config_from_seed.sh

      - name: Compile OpenWRT R4S full
        id: compileopenwrtfull
        continue-on-error: true
        run: |
          cd build/openwrt
          let make_process=$(nproc)+1
          make -j${make_process} V=s || make -j${make_process} V=s
      - name: If compile openwrt Error
        if: steps.compileopenwrtfull.outcome == 'failure'
        run: |
          cat build/openwrt/.config
          echo '================================================================'
          cd build/openwrt && make -j1 V=s
      - name: Organize files full
        id: organizefull
        run: |
          mv build/openwrt/bin/targets/rockchip/armv8/*sysupgrade.img* ./img/artifact/
          cd ./img/artifact/
          ls -Ahl
          mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-ext4-full.img.gz
          mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-squashfs-full.img.gz
          gzip -d *.gz && exit 0
          gzip --best *.img
          ls -Ahl
          zip OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-ext4-full.zip *r4s*ext4*full*
          zip OWRT-R4S-TheLinuxGuy-21.02-$RELTAG-squashfs-full.zip *r4s*squashfs*full*
          cp ../img/build/openwrt/*.config ./ 
          ls -Ahl
      
      - name: Upload artifact
        uses: actions/upload-artifact@main
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWRT_21.02
          path: ./img/artifact/

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1.8.4
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          name: OpenWrt 21.02 ${{ env.RELDATE }} 
          allowUpdates: true
          tag: r4s-21.02-${{ env.RELDATE }}
          commit: main
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "img/release-21.02.md"
          artifacts: ./img/artifact/*.zip
